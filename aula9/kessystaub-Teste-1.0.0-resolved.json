{
  "swagger": "2.0",
  "info": {
    "description": "This is a simple library server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.",
    "version": "1.0.0",
    "title": "Swagger Library",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "virtserver.swaggerhub.com",
  "basePath": "/kessystaub/Teste/1.0.0",
  "tags": [
    {
      "name": "book",
      "description": "Everything about the Books",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "user",
      "description": "Operations about user",
      "externalDocs": {
        "description": "Find out more about our library",
        "url": "http://swagger.io"
      }
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/book": {
      "post": {
        "tags": [
          "book"
        ],
        "summary": "Add a new book to the library",
        "description": "",
        "operationId": "addBook",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Book object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Book"
            }
          }
        ],
        "security": [
          {
            "library_auth": [
              "write:books",
              "read:books"
            ]
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "book"
        ],
        "summary": "Update an existing book",
        "description": "",
        "operationId": "updateBook",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Book object that needs to be added to the library",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Book"
            }
          }
        ],
        "security": [
          {
            "library_auth": [
              "write:books",
              "read:books"
            ]
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Book not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/book/findById": {
      "get": {
        "tags": [
          "book"
        ],
        "summary": "Finds Books by ID",
        "description": "",
        "operationId": "findBooksbyStatus",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Id values that need to be considered for filter",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "default": "0",
              "enum": [
                "1",
                "2",
                "3",
                "..."
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "security": [
          {
            "library_auth": [
              "write:books",
              "read:books"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Book"
              }
            }
          },
          "400": {
            "description": "Invalid id value"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "library_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://library.swagger.io/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "write:books": "modify books in your account",
        "read:books": "read your books"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "Order": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "petId": {
          "type": "integer",
          "format": "int64"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        },
        "shipDate": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "Order Status",
          "enum": [
            "placed",
            "approved",
            "delivered"
          ]
        },
        "complete": {
          "type": "boolean",
          "default": false
        }
      },
      "xml": {
        "name": "Order"
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "userStatus": {
          "type": "integer",
          "format": "int32",
          "description": "User Status"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "Book": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "titulo": {
          "type": "string",
          "example": "Os vingadores"
        }
      },
      "xml": {
        "name": "Book"
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}